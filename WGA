#!/usr/bin/env perl 
use strict;
use warnings;
use Getopt::Std;
use File::Basename;
use File::Temp qw/ tempdir /;
use FindBin '$Bin';
use lib "$Bin/lib";
use Memory::Usage;
use Resources qw/ get_time_RAM /;

# Takes two genome assemblies (A & B) in FASTA format and computes a Whole-Genome Alignment (WGA).
# By default uses Cgaln for the alignments, which is single-threaded, . 
# Returns:
# 1) BED file matching 0-based coordinates from A to B 
# 2) LOG file (text) with WGA stats
# 3) PDF file with dotplot of WGA for quality control [requires gnuplot in the system, not provided]

# Bruno Contreras Moreira, Ruben Sancho EEAD-CSIC 2024

# external binaries assumed to be available, edit if non-standard locations
my $GZIPEXE    = 'gzip'; 
my $BZIP2EXE   = 'bzip2';
my $GNUPLOTEXE = "gnuplot";

# binaries that should be installed with make 
my $GSALIGNEXE = "$Bin/lib/GSAlign/bin/GSAlign";
my $CGALNEXE   = "$Bin/lib/Cgaln/Cgaln";
my $CINDEXEXE  = "$Bin/lib/Cgaln/maketable";
my $REDEXE     = "$Bin/lib/Red/bin/Red";
my $RED2ENS    = "$Bin/utils/Red2Ensembl.py";
my $ALN2FASTA  = "$Bin/utils/aln2fasta.pl";
my $FASTA2DOT  = "$Bin/utils/fasta2dot.pl";
my $MAPCOORDS  = "$Bin/utils/mapcoords.pl";

my %opts;
my ($fileA, $fileB, $minlenMb, $ncores, $softmask, $use_gsalign) = ('', '', 1.0, 4, 1, 0);
my ($WGA_Cgaln_params, $WGA_index_params) = ('-X12000 -fc -cons', '-K11 -BS10000');
my $WGA_GSAlign_params = '-no_vcf -one'; #-one, -sen
my ($root, $cmd, $tempdirA, $tempdirB);
my ($tmpWGAfile, $WGAfile, $WGAdotfile, $WGAscriptfile);
my ($outBEDfile, $outLOGfile, $outPDFfile);

getopts('hcmgG:n:I:C:l:A:B:', \%opts);

if(($opts{'h'})||(scalar(keys(%opts))==0))
{
  print "\nusage: $0 [options]\n\n";
  print "-h this message\n";
  print "-A FASTA file of genome A              (example: -A speciesA.fna[.gz])\n";
  print "-B FASTA file of genome B              (example: -B speciesB.fna[.gz])\n";
  print "-l min contig length [Mbp]             (optional, default: -l $minlenMb)\n";
  print "-m FASTA files already soft-masked     (optional, default: masked with Red\n";
  print "-n number of cores                     (optional, some tasks only, default: $ncores\n";
  print "-g use multithreaded GSAlign algorithm (optional, default: Cgaln)\n";              
  print "-C parameters for Cgaln aligner        (optional, default: -C '$WGA_Cgaln_params')\n";
  print "-I parameters for Cgaln indexer        (optional, default: -I '$WGA_index_params')\n";
  print "-G parameters for GSAlign aligner      (optional, default: -G '$WGA_GSAlign_params')\n";
  print "-c print credits and checks install    (recommended)\n";
  exit(0);
}

if(defined($opts{'c'})) {

  #print "\nPrimary citation:\n \n";
  print "\nThis software uses external algorithms, please cite them accordingly:\n";
  print " GSAlign https://doi.org/10.1186/s12864-020-6569-1\n";
  print " Cgaln https://doi.org/10.1186/1471-2105-11-224\n";
  print " Red https://doi.org/10.1186/s12859-015-0654-5\n";
  print " Red2Ensembl https://doi.org/10.1002/tpg2.20143\n\n";

  # check all required binaries and print diagnostic info
  foreach my $exe ($GSALIGNEXE, $CGALNEXE, $REDEXE, $RED2ENS, $MAPCOORDS) { 
    if(`$exe -h 2>&1` !~ /usage/i && `$exe -h 2>&1` !~ /input/i) { 
      print "# ERROR: $exe not correctly installed; please run 'make'\n";
    }
  }

  # check also gnuplot, not provided
  $cmd = `gnuplot -h 2>&1`; 
  if(!$cmd || $cmd !~ /usage/i) {
    print "# WARNING: gnuplot not found; please install it ie \$ sudo apt install gnuplot-qt\n";
  }

  exit(0);
}

if(!defined($opts{'A'})) {
  die "# ERROR: need FASTA file of genome A (-A)\n";
} else {
  $fileA = $opts{'A'}
}

if(!defined($opts{'B'})) {
  die "# ERROR: need FASTA file of genome B (-B)\n";
} else {
  $fileB = $opts{'B'}
}

if(defined($opts{'l'}) && $opts{'l'} >= 0 && $opts{'l'} < 1000) {
  $minlenMb = $opts{'l'}
}

if(defined($opts{'n'}) && $opts{'n'} >= 0) {
  $ncores = $opts{'n'}
}

if(defined($opts{'g'})) { # GSAlign

  $use_gsalign = 1;

  if(defined($opts{'G'})) {
    $WGA_GSAlign_params = $opts{'G'}
  }

  $root = basename($fileA) .'.'. basename($fileB) . '_GSAlign_' . $WGA_GSAlign_params;
  $root =~ s/\s+/_/g;

  warn "## $0 -A $fileA -B $fileB -l $minlenMb -g $use_gsalign -G $WGA_GSAlign_params -n $ncores\n\n";
  warn "## root: $root\n\n";

} else { # Cgaln

  if(defined($opts{'m'})) {
    $softmask = 0
  }

  if(defined($opts{'I'})) {
    $WGA_index_params = $opts{'I'}
  }

  if(defined($opts{'C'})) {
    $WGA_Cgaln_params = $opts{'C'}
  }

  $root = basename($fileA) .'.'. basename($fileB) . '_Cgaln_' . $WGA_index_params . '_' . $WGA_Cgaln_params;
  $root =~ s/\s+/_/g;
  
  warn "## $0 -A $fileA -B $fileB -l $minlenMb -m $softmask -G $use_gsalign -I $WGA_index_params -C $WGA_Cgaln_params -n $ncores\n\n";
  warn "## root: $root\n\n";
}

######################################################

my $mu = Memory::Usage->new();
$mu->record('start');

# 1) foreach FASTA file filter out short sequences, take returned temp file
my ($filtA, $chrnamesA) = filter_FASTA_sequences( $fileA, $minlenMb, $GZIPEXE, $BZIP2EXE );
my ($filtB, $chrnamesB) = filter_FASTA_sequences( $fileB, $minlenMb, $GZIPEXE, $BZIP2EXE );

# 1.1) make sure chr names are different
foreach my $name (keys(%$chrnamesA)) {
  if(defined($chrnamesB->{ $name })) {
    die "# EXIT: same chromosome name ($name) found in $fileA and $fileB\n";
  }
}

# 2) mask filtered FASTA files if required
my $maskA = $fileA . '.sm.fasta';     
my $maskB = $fileB . '.sm.fasta';

if($softmask == 1) {

  print "\n## soft-masking filtered sequences\n\n";

  if(!-s $maskA) {  
    $tempdirA = tempdir( CLEANUP => 1 );
    $cmd = "$RED2ENS --cor $ncores --msk_file $maskA $filtA $tempdirA";
    system("$cmd");
    if($? != 0) {
      die "# EXIT: failed while soft-masking ($cmd)\n";
    }
  }

  if(!-s $maskB) {
    $tempdirB = tempdir( CLEANUP => 1 );
    $cmd = "$RED2ENS --cor $ncores --msk_file $maskB $filtB $tempdirB";
    system("$cmd");
    if($? != 0) {
      die "# EXIT: failed while soft-masking ($cmd)\n";
    }
  }

} else {
  $maskA = $filtA;
  $maskB = $filtB;  
}

# 3) compute WGA

$tmpWGAfile = $root . '.aln';
$WGAfile    = $root . '.fasta';
$WGAdotfile = $root . '.dot';

# 3.1) Cgaln algorithm (default), creates temp folder named 'CgalnTable'
if($use_gsalign == 0) {

  print "## CGaln algorithm\n\n";	
  print "\n## indexing masked, filtered sequences\n\n";

  # 3.1.1) compute indexes of filtered sequences,
  # saves indexes in folder _Cgalnidx
  $cmd = "$CINDEXEXE $WGA_index_params -o _Cgalnidx $maskA";
  system("$cmd");
  if($? != 0) {
    die "# EXIT: failed while indexing ($cmd)\n";
  }

  $cmd = "$CINDEXEXE $WGA_index_params -o _Cgalnidx $maskB";
  system("$cmd");
  if($? != 0) {
    die "# EXIT: failed while indexing ($cmd)\n";
  }

  # 3.1.2) compute Whole Genome Alignments of indexed sequences
  print "\n## computing and plotting Whole Genome Alignment\n\n";

  $cmd = "$CGALNEXE $maskA $maskB -o $WGAfile $WGA_Cgaln_params -r -otype2 -t _Cgalnidx";
  system("$cmd");
  if($? != 0) {
    die "# EXIT: failed while aligning ($cmd)\n";

  } 

  $cmd = "$FASTA2DOT $WGAfile $WGAdotfile";
  system("$cmd");
  if($? != 0) {
    die "# EXIT: failed while converting FASTA to DOT ($cmd)\n";

  } else {
    system("gzip -f $WGAfile");
    $WGAfile .= '.gz';
  }

} else {

  # 3.2) GSAlign algorithm (optional, multithreaded) 	
  print "## GSAlign algorithm\n\n";       	

  # 3.2.1) compute Whole Genome Alignments 
  print "\n## computing and plotting Whole Genome Alignment\n\n";

  $cmd = "$GSALIGNEXE -r $maskA -q $maskB -o $root $WGA_GSAlign_params -fmt 2";
  system("$cmd");
  if($? != 0) {
    die "# EXIT: failed while aligning ($cmd)\n";

  } else {
    # convert alignment format
    $cmd = "$ALN2FASTA $tmpWGAfile $maskA $maskB $WGAfile $WGAdotfile";
    system("$cmd");
    if($? != 0) {
      die "# EXIT: failed conversion ($cmd)\n";

    } else {
      system("gzip -f $WGAfile");
      $WGAfile .= '.gz';
    }
  }
}

# 3.3) export dotplot to PDF for visual inspection and parameter tweaking

$WGAscriptfile = $root . '.dot.script';
$outPDFfile    = $root . '.dot.pdf';

open(SCRIPT,">",$WGAscriptfile) || die "# cannot create $WGAscriptfile $!\n";

print SCRIPT<<"END"; 
set terminal pdf
set grid
set output "$outPDFfile"
plot "$WGAdotfile" with lines lw 5
unset output
exit
END

close(SCRIPT);

$cmd = "$GNUPLOTEXE -c $WGAscriptfile";
system("$cmd");
if($? != 0) {
  warn "# WARNING: failed while exporting dotplot to PDF ($cmd)\n\n";

  warn "# Inspection of dotplot is highly recommended to validate WGA and parameters.\n";
  warn "# Please install gnuplot ie \$ sudo apt install gnuplot-qt\n\n";
  $outPDFfile = "(failed, need to install gnuplot)\n"; 
}

# 3.4) convert WGA to TSV, soft-masked positions are skipped 

print "\n## converting Whole Genome Alignment to BED\n\n";

$outBEDfile = $root . '.bed';
$outLOGfile = $root . '.coords.log';

if($use_gsalign == 0) {
  $cmd = "$MAPCOORDS $WGAfile $maskA $maskB > $outBEDfile 2> $outLOGfile";
} else {
  $cmd = "$MAPCOORDS $WGAfile $maskA $maskB 1 > $outBEDfile 2> $outLOGfile";
}
system("$cmd");
if($? != 0) {
  die "# EXIT: failed while converting to TSV ($cmd)\n";
}

print "## output files:\n\n";
print "# BED: $outBEDfile\n";
print "# LOG: $outLOGfile\n";
print "# PDF: $outPDFfile\n\n";

open(LOG,"<",$outLOGfile) || die "# EXIT: cannot read $outLOGfile\n";
while(<LOG>) {
  if(/^# (valid blocks: \d+ unique positions: \d+)/){ 
    print "## WGA summary: $1\n";
  }
}
close(LOG);

# 4) summary of resources 
$mu->record('end');

printf("\n\n\n# time used (s): %d memory used (Mb): %2.1f\n",
  get_time_RAM($mu->report()));







# Takes 4 params:
# i)   path to FASTA file  (string)
# ii)  min sequence length (float, in Mbp)
# iii) path to GZIP executable
# iv)  path to BZIP2 executable
# Returns:
# i) path to FASTA file with long sequences
# ii) reference to hash with sequence names
sub filter_FASTA_sequences {
  
  my ( $infile, $min_length_Mb, $gzipexe, $bzip2exe ) = @_;

  my (%FASTA,%names,@ids);
  my ($magic,$root,$name,$seq,$seqid,$length);
  my ($n_of_sequences, $n_filtered_sequences) = (0, 0);

  # check input file format and open it accordingly
  open(INFILE,$infile) || die "# filter_FASTA_sequences: cannot read $infile, exit\n";
  sysread(INFILE,$magic,2);
  close(INFILE);

  if($infile =~ /\.gz$/ || $magic eq "\x1f\x8b") {  # GZIP compressed input
    if(!open(FASTA,"$gzipexe -dc $infile |")) {
      die "# filter_FASTA_sequences: cannot read GZIP compressed $infile $!\n"
        ."# please check gzip is installed\n";

    } else {
      $root = $infile;
      $root =~ s/\.gz//;      
    }
  }
  elsif($infile =~ /\.bz2$/ || $magic eq "BZ") {   # BZIP2 compressed input
    if(!open(FASTA,"$bzip2exe -dc $infile |")) {
      die "# filter_FASTA_sequences: cannot read BZIP2 compressed $infile $!\n"
        ."# please check bzip2 is installed\n";

    } else {
      $root = $infile;
      $root =~ s/\.bz2//;                 
    }
  }
  else { 
    open(FASTA,"<$infile") || die "# filter_FASTA_sequences: cannot read $infile $!\n"; 
    $root = $infile;
  }

  while(<FASTA>) {
    if(/^\>(\S+)/) {
      $name = $1;
      $n_of_sequences++;
      $seqid = $n_of_sequences;
      $FASTA{$seqid}{'NAME'} = $name;
      push(@ids,$seqid);

    } else {
      s/[\s|\n]//g;
      $FASTA{$seqid}{'SEQ'} .= $_;
    }
  }

  close(FASTA);

  # create file with long sequences 
  my $filtfile = $root . ".filt$min_length_Mb.fasta";
  open(FILT,">",$filtfile) || die "# filter_FASTA_sequences: cannot create $filtfile $!\n";

  foreach $seqid (@ids) {

    $length = length($FASTA{$seqid}{'SEQ'});

    if($length >= $min_length_Mb * 1_000_000) { 
      print "# filter_FASTA_sequences: [passed $length bp] $FASTA{$seqid}{'NAME'}\n";
      print FILT ">$FASTA{$seqid}{'NAME'}\n$FASTA{$seqid}{'SEQ'}\n";
      $names{$FASTA{$seqid}{'NAME'}}++;

    } else {
      print "# filter_FASTA_sequences: [skipped $length bp] $FASTA{$seqid}{'NAME'}\n";
    }
  }

  close(FILT);

  return ($filtfile, \%names);
}
